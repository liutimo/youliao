// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: YLBase.proto

#include "YLBase.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace YL {
namespace Base {
}  // namespace Base
}  // namespace YL
namespace protobuf_YLBase_2eproto {
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[3];
const ::google::protobuf::uint32 TableStruct::offsets[1] = {};
static const ::google::protobuf::internal::MigrationSchema* schemas = NULL;
static const ::google::protobuf::Message* const* file_default_instances = NULL;

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "YLBase.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      NULL, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\014YLBase.proto\022\007YL.Base*h\n\tServiceID\022\014\n\010"
      "SID_ZERO\020\000\022\r\n\tSID_LOGIN\020\001\022\023\n\017SID_FRIEND_"
      "LIST\020\002\022\013\n\007SID_MSG\020\003\022\r\n\tSID_GROUP\020\004\022\r\n\tSI"
      "D_OTHER\020\005*\324\001\n\nLoginCmdID\022\014\n\010CID_ZERO\020\000\022\034"
      "\n\027CID_LOGIN_REQ_MSGSERVER\020\201\002\022\034\n\027CID_LOGI"
      "N_RES_MSGSERVER\020\202\002\022\034\n\027CID_LOGIN_REQ_USER"
      "LOGIN\020\203\002\022\034\n\027CID_LOGIN_RES_USERLOGIN\020\204\002\022\037"
      "\n\032CID_LOGIN_REQ_USERLOGINOUT\020\205\002\022\037\n\032CID_L"
      "OGIN_RES_USERLOGINOUT\020\206\002*h\n\nResultType\022\026"
      "\n\022REFUSE_REASON_NONE\020\000\022\037\n\033REFUSE_REASON_"
      "NO_MSG_SERVER\020\001\022!\n\035REFUSE_REASON_MSG_SER"
      "VER_FULL\020\002b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 458);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "YLBase.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_YLBase_2eproto
namespace YL {
namespace Base {
const ::google::protobuf::EnumDescriptor* ServiceID_descriptor() {
  protobuf_YLBase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_YLBase_2eproto::file_level_enum_descriptors[0];
}
bool ServiceID_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* LoginCmdID_descriptor() {
  protobuf_YLBase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_YLBase_2eproto::file_level_enum_descriptors[1];
}
bool LoginCmdID_IsValid(int value) {
  switch (value) {
    case 0:
    case 257:
    case 258:
    case 259:
    case 260:
    case 261:
    case 262:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ResultType_descriptor() {
  protobuf_YLBase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_YLBase_2eproto::file_level_enum_descriptors[2];
}
bool ResultType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Base
}  // namespace YL

// @@protoc_insertion_point(global_scope)
